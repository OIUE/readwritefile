<extensionManifest><systemApiVersion>1.12.1</systemApiVersion><extensions><extension><name>org.oiue.nar.nifi.processors.writefile.WriteProcessor</name><type>PROCESSOR</type><deprecationNotice/><description>Writes the contents of a FlowFile to the local file system</description><tags><tag>put</tag><tag>local</tag><tag>copy</tag><tag>archive</tag><tag>files</tag><tag>filesystem</tag></tags><properties><property><name>Directory</name><displayName>Directory</displayName><description>The directory to which files should be written. You may use expression language such as /aa/bb/${path}</description><defaultValue></defaultValue><allowableValues></allowableValues><required>true</required><sensitive>false</sensitive><expressionLanguageSupported>true</expressionLanguageSupported><expressionLanguageScope>FLOWFILE_ATTRIBUTES</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>Conflict Resolution Strategy</name><displayName>Conflict Resolution Strategy</displayName><description>Indicates what should happen when a file with the same name already exists in the output directory</description><defaultValue>fail</defaultValue><allowableValues><allowableValue><displayName>replace</displayName><value>replace</value><description></description></allowableValue><allowableValue><displayName>ignore</displayName><value>ignore</value><description></description></allowableValue><allowableValue><displayName>fail</displayName><value>fail</value><description></description></allowableValue></allowableValues><required>true</required><sensitive>false</sensitive><expressionLanguageSupported>false</expressionLanguageSupported><expressionLanguageScope>NONE</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>Create Missing Directories</name><displayName>Create Missing Directories</displayName><description>If true, then missing destination directories will be created. If false, flowfiles are penalized and sent to failure.</description><defaultValue>true</defaultValue><allowableValues><allowableValue><displayName>true</displayName><value>true</value><description></description></allowableValue><allowableValue><displayName>false</displayName><value>false</value><description></description></allowableValue></allowableValues><required>true</required><sensitive>false</sensitive><expressionLanguageSupported>false</expressionLanguageSupported><expressionLanguageScope>NONE</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>Maximum File Count</name><displayName>Maximum File Count</displayName><description>Specifies the maximum number of files that can exist in the output directory</description><defaultValue></defaultValue><allowableValues></allowableValues><required>false</required><sensitive>false</sensitive><expressionLanguageSupported>false</expressionLanguageSupported><expressionLanguageScope>NONE</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>Last Modified Time</name><displayName>Last Modified Time</displayName><description>Sets the lastModifiedTime on the output file to the value of this attribute.  Format must be yyyy-MM-dd'T'HH:mm:ssZ.  You may also use expression language such as ${file.lastModifiedTime}.</description><defaultValue></defaultValue><allowableValues></allowableValues><required>false</required><sensitive>false</sensitive><expressionLanguageSupported>true</expressionLanguageSupported><expressionLanguageScope>FLOWFILE_ATTRIBUTES</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>Last Modified Time TimeOut(millisecond) </name><displayName>Last Modified Time TimeOut(millisecond) </displayName><description>Task last modified time timeout.</description><defaultValue>600000</defaultValue><allowableValues></allowableValues><required>true</required><sensitive>false</sensitive><expressionLanguageSupported>false</expressionLanguageSupported><expressionLanguageScope>NONE</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>Permissions</name><displayName>Permissions</displayName><description>Sets the permissions on the output file to the value of this attribute.  Format must be either UNIX rwxrwxrwx with a - in place of denied permissions (e.g. rw-r--r--) or an octal number (e.g. 644).  You may also use expression language such as ${file.permissions}.</description><defaultValue></defaultValue><allowableValues></allowableValues><required>false</required><sensitive>false</sensitive><expressionLanguageSupported>true</expressionLanguageSupported><expressionLanguageScope>FLOWFILE_ATTRIBUTES</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>Owner</name><displayName>Owner</displayName><description>Sets the owner on the output file to the value of this attribute.  You may also use expression language such as ${file.owner}. Note on many operating systems Nifi must be running as a super-user to have the permissions to set the file owner.</description><defaultValue></defaultValue><allowableValues></allowableValues><required>false</required><sensitive>false</sensitive><expressionLanguageSupported>true</expressionLanguageSupported><expressionLanguageScope>FLOWFILE_ATTRIBUTES</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>Group</name><displayName>Group</displayName><description>Sets the group on the output file to the value of this attribute.  You may also use expression language such as ${file.group}.</description><defaultValue></defaultValue><allowableValues></allowableValues><required>false</required><sensitive>false</sensitive><expressionLanguageSupported>true</expressionLanguageSupported><expressionLanguageScope>FLOWFILE_ATTRIBUTES</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property></properties><dynamicProperties></dynamicProperties><relationships><relationship><name>success</name><description>Files that have been successfully written to the output directory are transferred to this relationship</description><autoTerminated>false</autoTerminated></relationship><relationship><name>failure</name><description>Files that could not be written to the output directory for some reason are transferred to this relationship</description><autoTerminated>false</autoTerminated></relationship><relationship><name>fragment success</name><description>Files fragment that have been successfully written to the output directory are transferred to this relationship</description><autoTerminated>false</autoTerminated></relationship></relationships><dynamicRelationship></dynamicRelationship><readsAttributes><readsAttribute><name></name><description></description></readsAttribute><readsAttribute><name>filename</name><description>The filename to use when writing the FlowFile to disk.</description></readsAttribute></readsAttributes><writesAttributes><writesAttribute><name></name><description></description></writesAttribute></writesAttributes><stateful></stateful><restricted><restrictions><restriction><requiredPermission>write filesystem</requiredPermission><explanation>Provides operator the ability to write to any file that NiFi has access to.</explanation></restriction></restrictions></restricted><inputRequirement>INPUT_REQUIRED</inputRequirement><systemResourceConsiderations></systemResourceConsiderations><seeAlso/></extension><extension><name>org.oiue.nar.nifi.processors.writefile.ReadProcessor</name><type>PROCESSOR</type><deprecationNotice/><description>Reads the contents of a file from disk and streams it into the contents of an incoming FlowFile. Once this is done, the file is optionally moved elsewhere or deleted to help keep the file system organized.</description><tags><tag>local</tag><tag>files</tag><tag>filesystem</tag><tag>ingest</tag><tag>ingress</tag><tag>get</tag><tag>source</tag><tag>input</tag><tag>fetch</tag></tags><properties><property><name>File to Fetch</name><displayName>File to Fetch</displayName><description>The fully-qualified filename of the file to fetch from the file system</description><defaultValue>${absolute.path}/${filename}</defaultValue><allowableValues></allowableValues><required>true</required><sensitive>false</sensitive><expressionLanguageSupported>true</expressionLanguageSupported><expressionLanguageScope>FLOWFILE_ATTRIBUTES</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>character-set</name><displayName>Character Set</displayName><description>The Character Encoding that is used to encode/decode the file</description><defaultValue>UTF-8</defaultValue><allowableValues></allowableValues><required>true</required><sensitive>false</sensitive><expressionLanguageSupported>false</expressionLanguageSupported><expressionLanguageScope>NONE</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>ignore-header</name><displayName>Ignore Header Rows</displayName><description>If the first N lines are headers, will be ignored.</description><defaultValue>0</defaultValue><allowableValues></allowableValues><required>true</required><sensitive>false</sensitive><expressionLanguageSupported>false</expressionLanguageSupported><expressionLanguageScope>NONE</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>rows</name><displayName>N of lines read)</displayName><description>N rows read.</description><defaultValue>100</defaultValue><allowableValues></allowableValues><required>true</required><sensitive>false</sensitive><expressionLanguageSupported>false</expressionLanguageSupported><expressionLanguageScope>NONE</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>delay</name><displayName>N of lines delay(milliseconds)</displayName><description>Pause time per N rows read.</description><defaultValue>0</defaultValue><allowableValues></allowableValues><required>true</required><sensitive>false</sensitive><expressionLanguageSupported>false</expressionLanguageSupported><expressionLanguageScope>NONE</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>Completion Strategy</name><displayName>Completion Strategy</displayName><description>Specifies what to do with the original file on the file system once it has been pulled into NiFi</description><defaultValue>None</defaultValue><allowableValues><allowableValue><displayName>None</displayName><value>None</value><description>Leave the file as-is</description></allowableValue><allowableValue><displayName>Move File</displayName><value>Move File</value><description>Moves the file to the directory specified by the &lt;Move Destination Directory&gt; property</description></allowableValue><allowableValue><displayName>Delete File</displayName><value>Delete File</value><description>Deletes the original file from the file system</description></allowableValue></allowableValues><required>true</required><sensitive>false</sensitive><expressionLanguageSupported>false</expressionLanguageSupported><expressionLanguageScope>NONE</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>Move Destination Directory</name><displayName>Move Destination Directory</displayName><description>The directory to the move the original file to once it has been fetched from the file system. This property is ignored unless the Completion Strategy is set to "Move File". If the directory does not exist, it will be created.</description><defaultValue></defaultValue><allowableValues></allowableValues><required>false</required><sensitive>false</sensitive><expressionLanguageSupported>true</expressionLanguageSupported><expressionLanguageScope>FLOWFILE_ATTRIBUTES</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>Move Conflict Strategy</name><displayName>Move Conflict Strategy</displayName><description>If Completion Strategy is set to Move File and a file already exists in the destination directory with the same name, this property specifies how that naming conflict should be resolved</description><defaultValue>Rename</defaultValue><allowableValues><allowableValue><displayName>Rename</displayName><value>Rename</value><description>The existing destination file should remain intact. The newly ingested file should be moved to the destination directory but be renamed to a random filename</description></allowableValue><allowableValue><displayName>Replace File</displayName><value>Replace File</value><description>The newly ingested file should replace the existing file in the Destination Directory</description></allowableValue><allowableValue><displayName>Keep Existing</displayName><value>Keep Existing</value><description>The existing file should in the Destination Directory should stay intact and the newly ingested file should be deleted</description></allowableValue><allowableValue><displayName>Fail</displayName><value>Fail</value><description>The existing destination file should remain intact and the incoming FlowFile should be routed to failure</description></allowableValue></allowableValues><required>true</required><sensitive>false</sensitive><expressionLanguageSupported>false</expressionLanguageSupported><expressionLanguageScope>NONE</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>Log level when file not found</name><displayName>Log level when file not found</displayName><description>Log level to use in case the file does not exist when the processor is triggered</description><defaultValue>ERROR</defaultValue><allowableValues><allowableValue><displayName>TRACE</displayName><value>TRACE</value><description></description></allowableValue><allowableValue><displayName>DEBUG</displayName><value>DEBUG</value><description></description></allowableValue><allowableValue><displayName>INFO</displayName><value>INFO</value><description></description></allowableValue><allowableValue><displayName>WARN</displayName><value>WARN</value><description></description></allowableValue><allowableValue><displayName>ERROR</displayName><value>ERROR</value><description></description></allowableValue><allowableValue><displayName>FATAL</displayName><value>FATAL</value><description></description></allowableValue><allowableValue><displayName>NONE</displayName><value>NONE</value><description></description></allowableValue></allowableValues><required>true</required><sensitive>false</sensitive><expressionLanguageSupported>false</expressionLanguageSupported><expressionLanguageScope>NONE</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property><property><name>Log level when permission denied</name><displayName>Log level when permission denied</displayName><description>Log level to use in case user every does not have sufficient permissions to read the file</description><defaultValue>ERROR</defaultValue><allowableValues><allowableValue><displayName>TRACE</displayName><value>TRACE</value><description></description></allowableValue><allowableValue><displayName>DEBUG</displayName><value>DEBUG</value><description></description></allowableValue><allowableValue><displayName>INFO</displayName><value>INFO</value><description></description></allowableValue><allowableValue><displayName>WARN</displayName><value>WARN</value><description></description></allowableValue><allowableValue><displayName>ERROR</displayName><value>ERROR</value><description></description></allowableValue><allowableValue><displayName>FATAL</displayName><value>FATAL</value><description></description></allowableValue><allowableValue><displayName>NONE</displayName><value>NONE</value><description></description></allowableValue></allowableValues><required>true</required><sensitive>false</sensitive><expressionLanguageSupported>false</expressionLanguageSupported><expressionLanguageScope>NONE</expressionLanguageScope><dynamicallyModifiesClasspath>false</dynamicallyModifiesClasspath><dynamic>false</dynamic></property></properties><dynamicProperties></dynamicProperties><relationships><relationship><name>success</name><description>Any FlowFile that is successfully read from the file system will be transferred to this Relationship.</description><autoTerminated>false</autoTerminated></relationship><relationship><name>File fragment</name><description>File fragment flowFile that is success read N lines from the file system will be transferred to this Relationship.</description><autoTerminated>false</autoTerminated></relationship><relationship><name>File has next fragment</name><description>There is the next fragment of the file will be transferred to this Relationship.</description><autoTerminated>false</autoTerminated></relationship><relationship><name>not.found</name><description>Any FlowFile that could not be fetched from the file system because the file could not be found will be transferred to this Relationship.</description><autoTerminated>false</autoTerminated></relationship><relationship><name>permission.denied</name><description>Any FlowFile that could not be fetched from the file system due to the user running NiFi not having sufficient permissions will be transferred to this Relationship.</description><autoTerminated>false</autoTerminated></relationship><relationship><name>failure</name><description>Any FlowFile that could not be fetched from the file system for any reason other than insufficient permissions or the file not existing will be transferred to this Relationship.</description><autoTerminated>false</autoTerminated></relationship><relationship><name>original</name><description>The original file</description><autoTerminated>false</autoTerminated></relationship></relationships><dynamicRelationship></dynamicRelationship><readsAttributes><readsAttribute><name></name><description></description></readsAttribute></readsAttributes><writesAttributes><writesAttribute><name></name><description></description></writesAttribute></writesAttributes><stateful></stateful><restricted><restrictions><restriction><requiredPermission>read filesystem</requiredPermission><explanation>Provides operator the ability to read from any file that NiFi has access to.</explanation></restriction><restriction><requiredPermission>write filesystem</requiredPermission><explanation>Provides operator the ability to delete any file that NiFi has access to.</explanation></restriction></restrictions></restricted><inputRequirement>INPUT_REQUIRED</inputRequirement><systemResourceConsiderations></systemResourceConsiderations><seeAlso/></extension></extensions></extensionManifest>